<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>骚操作之图种（内涵图）制作与使用</title>
      <link href="/2020/01/17/3/"/>
      <url>/2020/01/17/3/</url>
      
        <content type="html"><![CDATA[<h1 id="极简简述"><a href="#极简简述" class="headerlink" title="极简简述"></a>极简简述</h1><p>一种采用特殊方式将图片文件（如jpg格式）与压缩文件结合起来的文件。该文件一般输出为jpg图片文件，可以正常预览图片；当有人将该图片下载到本地后，可以通过修改文件的后缀，将.jpg改为.zip，并用winrar/7zip查看得到数据。由于这种方式有利于某些网友<del>（老司机）</del>传播种子文件，故称为图种，又叫作内涵图。       ————百度百科</p><p><em>本文主要介绍本人写的一个『图种创建工具』，同志们踊跃下载使用啊😄O(∩-∩)O</em></p><hr><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><blockquote><p>本人一时兴起，写了这么一个小工具，已经上传至 GitHub 并开源；对代码感兴趣的朋友可以点击<a href="https://github.com/kachacha/map-species" target="_blank" rel="noopener">图种创建工具（map-species）</a>或下面链接提<code>lssues</code>等，欢迎各种蹂躏🙅‍。</p></blockquote><p><a href="https://github.com/kachacha/map-species" target="_blank" rel="noopener">https://github.com/kachacha/map-species</a></p><p>觉得还可以的记得点亮一个<code>Star</code>，感激不尽。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><blockquote><p>使用提示：建议单个文件建立此种子，最好先压缩成压缩包，在建立种子文件，否则解种后文件可能乱码！</p></blockquote><ul><li><p>点击下载 <a href="https://github.com/kachacha/map-species/releases/download/V1.0.0/MapSpecies.exe" target="_blank" rel="noopener">MapSpecies.exe</a></p></li><li><p>双击文件运行</p></li></ul><p><strong>程序主页面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/map-species-main-page.png" alt="主页面" title="主界面"></p><p>修改或不修改想要的最终文件名称，打开一个想要携带的图片载体（也可以随机生成一个&lt;验证码&gt;，只不过不太好看）；然后选择种子文件；点击 <code>生成种子</code> 按钮。</p><p><strong>运行效果如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="images/img2.png" alt="暂无图片" title="运行"></p><p><strong>截图效果如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/map-species-creat-success.png" alt="运行效果" title="生成种子"></p><p>最后在你运行此<code>.exe</code>文件第目录下会产出一个种子文件（图片）；开心的进行存储和传递吧！！！😄，O(∩_∩)O。</p><h2 id="解种"><a href="#解种" class="headerlink" title="解种"></a>解种</h2><blockquote><p>使用提示：建议单个文件建立此种子，最好先压缩成压缩包，在建立种子文件，否则解种后文件可能乱码！</p></blockquote><p>解开种子之前你首先需要知道文件之前的后缀名是什么，否则解开失败。</p><p><strong>解种截图效果如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/map-species-update-extension-name.png" alt="运行效果" title="解种"></p><ul><li>点击“是”皆可解开图种，双击打开就是你想要的文件了！！！</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图种 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下使用Ubuntu、Linux各命令</title>
      <link href="/2020/01/08/2/"/>
      <url>/2020/01/08/2/</url>
      
        <content type="html"><![CDATA[<h1 id="极简简述"><a href="#极简简述" class="headerlink" title="极简简述"></a>极简简述</h1><p>最近因为项目需要，总结了一些在 Windows 下使用 Ubuntu、Linux 一些命令的方法；相对来说 Windows 做一些微底层开发工作还是比较麻烦的，比如说打个 Docker 啊、起个服务啊等等；不过工作不只是搞技术，针对综合的工作需要，Windows 系统还是很方便的。双/多系统、云/多服务器、双/多机器大佬路过无视即可。。。:smiley: </p><hr><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>总结两种配置方法：安装 Git 和 下载 Windows 可用的 .exe 命令安装包</p><h3 id="安装-Git-以及配置环境变量"><a href="#安装-Git-以及配置环境变量" class="headerlink" title="安装 Git 以及配置环境变量"></a>安装 Git 以及配置环境变量</h3><ul><li>首先下载安装 Git ：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载地址</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/%E4%B8%8B%E8%BD%BDGit.jpg" alt="" title="下载Git"></p><ul><li>直接双击安装，一路 Next 即可（注意若想要修改安装路径，即可在修改页修改即可；<strong><em>建议安装到 C盘以外的其它盘</em></strong>，Windows可能有权限问题，挺麻烦的。）</li><li>安装完成后打开安装的路径，将以下路径配置到环境变量中</li></ul><pre class="line-numbers language-text"><code class="language-text">E:\你Git的安装目录\Git\usr\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/git%E5%91%BD%E4%BB%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpg" alt="" title="git命令环境变量"></p><ul><li><p>使用管理员权限打开你的 cmd 或 PowerShell 或 任意目录右键 Git Bash</p></li><li><p>然后输入一个比较常用的命令试试:yum:比如键入：ls</p><p> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/Windows%E4%BD%BF%E7%94%A8ls%E5%91%BD%E4%BB%A4.jpg" alt="" title="Windows使用ls命令"></p></li></ul><p>顺便安利一下 <code>sed</code>命令的使用方法：</p><pre class="line-numbers language-text"><code class="language-text"># 修改文件中匹配到第一个 1234 的字符串 改为 5678sed -i s/1234/5678/ test.txt# 修改文件中所有匹配到 1234 的字符串 改为 5678sed -i s/1234/5678/g test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然了，这还不能满足我这个我需要的所有键入，所以讲一下以下这种方式。</p><h3 id="安装各命令-exe-文件"><a href="#安装各命令-exe-文件" class="headerlink" title="安装各命令 .exe 文件"></a>安装各命令 .exe 文件</h3><blockquote><p>Windows 可以使用安装的形式或者下载 .exe 文件配置到环境变量的形式配置各种命令，网上的资源也是大量的（看来 Windows 开发的大佬们还是很多的:cowboy_hat_face: 。。）；废话不多说，先讲一个例子：</p></blockquote><p>比如 <code>vi</code> 命令对文件的编辑命令</p><ul><li><p>去官网 <a href="https://www.vim.org/" target="_blank" rel="noopener">https://www.vim.org/</a> 下载 <a href="https://www.vim.org/download.php" target="_blank" rel="noopener">gvim.exe</a></p></li><li><p>将下载下来的文件放到你觉得比较安全的，不经常删除的文件夹中（不建议放在 C盘）</p></li><li><p>然后将其路径配置到 Path 环境变量中</p></li><li><p>使用管理员权限打开你的 cmd 或 PowerShell 或 任意目录右键 Git Bash 键入：vim 试一下:sunglasses:</p><p> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/Windows%E4%BD%BF%E7%94%A8vi%E5%91%BD%E4%BB%A4.jpg" alt="" title="Windows使用vi命令"></p></li><li><p>打开 vim 之后，可能无法切换到命令行模式，可以按 Ctrl+Shift 切换输入法，之后就可以进入非编辑模式了 </p></li></ul><p>接下来说一下其它命令的下载地址：</p><ul><li>vi 命令：<a href="https://www.vim.org/download.php" target="_blank" rel="noopener">这里</a></li><li>make 命令：<a href="https://makeexe.updatestar.com/" target="_blank" rel="noopener">这里</a></li><li>docker 命令：<a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">这里</a></li><li>持续更新。。。</li></ul><h2 id="语言使用"><a href="#语言使用" class="headerlink" title="语言使用"></a>语言使用</h2><h3 id="Python-运行命令行"><a href="#Python-运行命令行" class="headerlink" title="Python 运行命令行"></a>Python 运行命令行</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.system("命令加参数") 不支持将返回的结果赋值给一个变量</span><span class="token keyword">import</span>  osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"命令加参数"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"命令 &lt; 出入文件 | 另一个命令 > 输出文件"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># os.popen("命令") 有返回值</span><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"echo Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls *.sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># subprocess的call方法</span>return_code <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token string">"echo Hello World"</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Java-使用命令行"><a href="#Java-使用命令行" class="headerlink" title="Java 使用命令行"></a>Java 使用命令行</h3><pre class="line-numbers language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> arg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span> <span class="token string">"/c"</span><span class="token punctuation">,</span> <span class="token string">"ls"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里如果需要运行一个文件，可以换成 .bat 文件</span><span class="token comment" spellcheck="true">// 若需要运行多行 在命令之间加 &amp;&amp;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"即将执行命令行："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行以及打印方法一</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">"执行成功"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isWindows <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"windows"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Process ps <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isWindows<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> arg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span> <span class="token string">"/c"</span><span class="token punctuation">,</span> <span class="token string">"gitlabG.bat"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> envp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"asd=asdd22"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 传进文件运行脚本文件的环境变量</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"即将执行脚本："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> arg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"gitlabG.sh"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"即将执行脚本："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ps<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>                Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行以及打印方法二</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    ps <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cmd /c sed -i 's/focusedcrawlera123/123456789/g' focused-crawler/focusedcrawler/spiders/focusedcrawler.py"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cmd /c cd focused-crawler &amp;&amp; scrapyd-deploy -l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StreamHandler errorStreamHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamHandler</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ERROR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    errorStreamHandler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StreamHandler outputStreamHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamHandler</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"STDOUT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStreamHandler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>BashTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>SEVERE<span class="token punctuation">,</span> null<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置解析函数：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*     *StreamHandler class     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StreamHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    InputStream m_inputStream<span class="token punctuation">;</span>    String m_type<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StreamHandler</span><span class="token punctuation">(</span>InputStream is<span class="token punctuation">,</span> String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>m_inputStream <span class="token operator">=</span> is<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InputStreamReader isr <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置编码方式，否则输出中文时容易乱码</span>            isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>m_inputStream<span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PRINT > "</span> <span class="token operator">+</span> m_type <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ioe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>StreamHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>SEVERE<span class="token punctuation">,</span> null<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li>注意在项目中需要运行一个 .bat 文件或者一个 .sh 脚本文件，就算机器环境有此命令，项目有时也读取不到，解决方法如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> sed<span class="token operator">=</span><span class="token string">"E:\你的git安装目录\Git\usr\bin\sed.exe"</span>%sed% -i <span class="token string">'s/focusedcrawlera123/%asd%/g'</span> focusedcrawler.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>首先指定命令目录，然后执行所需要的命令行</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>详细介绍Java命令的使用请：<a href="http://doc.zfeno.cn/views/JAVA%E7%9B%B8%E5%85%B3/ToolsThings/JAVA%E5%AE%8C%E7%BE%8E%E8%BF%90%E8%A1%8Cbash%E5%91%BD%E4%BB%A4%E7%9A%84%E4%B8%80%E6%95%B4%E5%A5%97%E6%B5%81%E7%A8%8B.html" target="_blank" rel="noopener">点击这里</a></li><li><a href="https://www.cnblogs.com/zndxall/p/9319077.html" target="_blank" rel="noopener">windows下使用sed和tee命令</a></li><li><a href="https://www.jb51.net/article/155253.htm" target="_blank" rel="noopener">bash命令使用详解</a></li><li><a href="https://blog.csdn.net/weixin_38663832/article/details/80604918" target="_blank" rel="noopener">windows 下安装 vim，并通过 dos 启动 vim 编辑器</a></li><li><a href="https://blog.csdn.net/xiaogangwang2012/article/details/17713339" target="_blank" rel="noopener">Java使用Runtime.getRuntime().exec()时的运行输出 问题解决</a></li><li><a href="https://bbs.csdn.net/topics/390139903?list=33092559" target="_blank" rel="noopener">Runtime.getRuntime().exec(command)使用</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 实用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 </tag>
            
            <tag> 命令 </tag>
            
            <tag> bash </tag>
            
            <tag> .bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内代码仓库（Coding）使用和托管</title>
      <link href="/2020/01/02/1/"/>
      <url>/2020/01/02/1/</url>
      
        <content type="html"><![CDATA[<h1 id="极简简述"><a href="#极简简述" class="headerlink" title="极简简述"></a>极简简述</h1><p>实际上 Coding 支持的功能并不比 github 少；代码托管+敏捷开发+测试管理+持续集成+制品等，使用起来还是比较方便的；本文主要描述一下Coding的博客代码托管等。</p><hr><h1 id="账号使用"><a href="#账号使用" class="headerlink" title="账号使用"></a>账号使用</h1><p>直接注册Coding账号（暂时不想创建团队，所以这里直接使用自己的腾讯云账号链接登录）；<a href="https://coding.net/login" target="_blank" rel="noopener">Coding 传送门</a>。</p><p>最近 Coding 在维护升级，并且已经合并于腾讯云开发者平台中，感觉上是不是越来越好了？</p><h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><ul><li>创建项目</li></ul><blockquote><p>这里一定要注意，如果创建的是需要开启 pages 托管的网站项目，项目名称需要与你的用户名相同；其它项目无所谓按照格式要求就好了。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/Coding-Creaded-Project.jpg" alt="创建项目" title="创建项目"></p><ul><li>根据生成的 <code>.git</code> 地址拉取到本地</li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/Coding-Git-Clone.jpg" alt="Coding Git Clone" title="Coding Git Clone"></p><ul><li>与 Github 或 Gitlab 流程一样，添加、修改代码到项目中，然后推至其地址</li></ul><hr><blockquote><p>以下是针对网站、博客的托管服务而需要配置一些功能</p></blockquote><h1 id="开启Pages服务"><a href="#开启Pages服务" class="headerlink" title="开启Pages服务"></a>开启Pages服务</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/sart-coding-page.jpg" alt="Start Coding Page" title="Start Coding Page"></p><p>在设置中可以设置默认分支和自定义域名，都是比较便捷的。</p><p>开启 Pages 服务后，会自动启动其网站应用，点击生成的访问地址即可快速访问你的网站。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh/kachacha/markdownPicture/docImg/coding-website-link.jpg" alt="Coding Website Link" title="Coding Website Link"></p><h1 id="配置一键部署"><a href="#配置一键部署" class="headerlink" title="配置一键部署"></a>配置一键部署</h1><p>需要按如下配置，可以同时push到GitHub和Coding，需要将其中的代码仓库地址修改为自己的。</p><pre class="line-numbers language-text"><code class="language-text">deploy: - type: git  repo: https://github.com/hoxis/hoxis.github.io.git  branch: master- type: git  repo: https://git.coding.net/hoxis/hoxis.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说 Coding 还是非常符合国情，使用起来还是非常舒服的；</p><p>托管项目流程便捷，最终方便快速访问：</p><ul><li><a href="https://zfeno.coding.me/" target="_blank" rel="noopener">https://zfeno.coding.me/</a></li></ul><blockquote><p>欢迎访问本人的生活博客以及技术博客。</p></blockquote><ul><li><p><a href="http://www.zfeno.cn/">http://www.zfeno.cn/</a></p></li><li><p><a href="http://doc.zfeno.cn/" target="_blank" rel="noopener">http://doc.zfeno.cn/</a></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
            <tag> Github </tag>
            
            <tag> 仓库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
